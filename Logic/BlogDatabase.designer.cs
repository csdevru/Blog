#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Logic
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="blogDataBase")]
	public partial class BlogDatabaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertarticle(article instance);
    partial void Updatearticle(article instance);
    partial void Deletearticle(article instance);
    partial void Inserttag(tag instance);
    partial void Updatetag(tag instance);
    partial void Deletetag(tag instance);
    partial void Insertcomment(comment instance);
    partial void Updatecomment(comment instance);
    partial void Deletecomment(comment instance);
    partial void Insertcustomer(customer instance);
    partial void Updatecustomer(customer instance);
    partial void Deletecustomer(customer instance);
    partial void Insertrole(role instance);
    partial void Updaterole(role instance);
    partial void Deleterole(role instance);
    partial void Insertrubric(rubric instance);
    partial void Updaterubric(rubric instance);
    partial void Deleterubric(rubric instance);
    #endregion
		
		public BlogDatabaseDataContext() : 
				base(global::Logic.Properties.Settings.Default.blogDataBaseConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public BlogDatabaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BlogDatabaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BlogDatabaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BlogDatabaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<article> articles
		{
			get
			{
				return this.GetTable<article>();
			}
		}
		
		public System.Data.Linq.Table<tag> tags
		{
			get
			{
				return this.GetTable<tag>();
			}
		}
		
		public System.Data.Linq.Table<articles_tag> articles_tags
		{
			get
			{
				return this.GetTable<articles_tag>();
			}
		}
		
		public System.Data.Linq.Table<comment> comments
		{
			get
			{
				return this.GetTable<comment>();
			}
		}
		
		public System.Data.Linq.Table<customer> customers
		{
			get
			{
				return this.GetTable<customer>();
			}
		}
		
		public System.Data.Linq.Table<customers_role> customers_roles
		{
			get
			{
				return this.GetTable<customers_role>();
			}
		}
		
		public System.Data.Linq.Table<role> roles
		{
			get
			{
				return this.GetTable<role>();
			}
		}
		
		public System.Data.Linq.Table<rubric> rubrics
		{
			get
			{
				return this.GetTable<rubric>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.articles")]
	public partial class article : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _article_id;
		
		private string _article_title;
		
		private string _article_text;
		
		private System.Guid _customer_id;
		
		private System.DateTimeOffset _article_create_date;
		
		private System.Guid _rubric_id;
		
		private EntitySet<comment> _comments;
		
		private EntityRef<customer> _customer;
		
		private EntityRef<rubric> _rubric;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onarticle_idChanging(System.Guid value);
    partial void Onarticle_idChanged();
    partial void Onarticle_titleChanging(string value);
    partial void Onarticle_titleChanged();
    partial void Onarticle_textChanging(string value);
    partial void Onarticle_textChanged();
    partial void Oncustomer_idChanging(System.Guid value);
    partial void Oncustomer_idChanged();
    partial void Onarticle_create_dateChanging(System.DateTimeOffset value);
    partial void Onarticle_create_dateChanged();
    partial void Onrubric_idChanging(System.Guid value);
    partial void Onrubric_idChanged();
    #endregion
		
		public article()
		{
			this._comments = new EntitySet<comment>(new Action<comment>(this.attach_comments), new Action<comment>(this.detach_comments));
			this._customer = default(EntityRef<customer>);
			this._rubric = default(EntityRef<rubric>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_article_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid article_id
		{
			get
			{
				return this._article_id;
			}
			set
			{
				if ((this._article_id != value))
				{
					this.Onarticle_idChanging(value);
					this.SendPropertyChanging();
					this._article_id = value;
					this.SendPropertyChanged("article_id");
					this.Onarticle_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_article_title", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string article_title
		{
			get
			{
				return this._article_title;
			}
			set
			{
				if ((this._article_title != value))
				{
					this.Onarticle_titleChanging(value);
					this.SendPropertyChanging();
					this._article_title = value;
					this.SendPropertyChanged("article_title");
					this.Onarticle_titleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_article_text", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string article_text
		{
			get
			{
				return this._article_text;
			}
			set
			{
				if ((this._article_text != value))
				{
					this.Onarticle_textChanging(value);
					this.SendPropertyChanging();
					this._article_text = value;
					this.SendPropertyChanged("article_text");
					this.Onarticle_textChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_customer_id", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid customer_id
		{
			get
			{
				return this._customer_id;
			}
			set
			{
				if ((this._customer_id != value))
				{
					if (this._customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oncustomer_idChanging(value);
					this.SendPropertyChanging();
					this._customer_id = value;
					this.SendPropertyChanged("customer_id");
					this.Oncustomer_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_article_create_date", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset article_create_date
		{
			get
			{
				return this._article_create_date;
			}
			set
			{
				if ((this._article_create_date != value))
				{
					this.Onarticle_create_dateChanging(value);
					this.SendPropertyChanging();
					this._article_create_date = value;
					this.SendPropertyChanged("article_create_date");
					this.Onarticle_create_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rubric_id", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid rubric_id
		{
			get
			{
				return this._rubric_id;
			}
			set
			{
				if ((this._rubric_id != value))
				{
					if (this._rubric.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onrubric_idChanging(value);
					this.SendPropertyChanging();
					this._rubric_id = value;
					this.SendPropertyChanged("rubric_id");
					this.Onrubric_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="article_comment", Storage="_comments", ThisKey="article_id", OtherKey="article_id")]
		public EntitySet<comment> comments
		{
			get
			{
				return this._comments;
			}
			set
			{
				this._comments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="customer_article", Storage="_customer", ThisKey="customer_id", OtherKey="customer_id", IsForeignKey=true)]
		public customer customer
		{
			get
			{
				return this._customer.Entity;
			}
			set
			{
				customer previousValue = this._customer.Entity;
				if (((previousValue != value) 
							|| (this._customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._customer.Entity = null;
						previousValue.articles.Remove(this);
					}
					this._customer.Entity = value;
					if ((value != null))
					{
						value.articles.Add(this);
						this._customer_id = value.customer_id;
					}
					else
					{
						this._customer_id = default(System.Guid);
					}
					this.SendPropertyChanged("customer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="rubric_article", Storage="_rubric", ThisKey="rubric_id", OtherKey="rubric_id", IsForeignKey=true)]
		public rubric rubric
		{
			get
			{
				return this._rubric.Entity;
			}
			set
			{
				rubric previousValue = this._rubric.Entity;
				if (((previousValue != value) 
							|| (this._rubric.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._rubric.Entity = null;
						previousValue.articles.Remove(this);
					}
					this._rubric.Entity = value;
					if ((value != null))
					{
						value.articles.Add(this);
						this._rubric_id = value.rubric_id;
					}
					else
					{
						this._rubric_id = default(System.Guid);
					}
					this.SendPropertyChanged("rubric");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_comments(comment entity)
		{
			this.SendPropertyChanging();
			entity.article = this;
		}
		
		private void detach_comments(comment entity)
		{
			this.SendPropertyChanging();
			entity.article = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tags")]
	public partial class tag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _tag_id;
		
		private string _tag_name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Ontag_idChanging(System.Guid value);
    partial void Ontag_idChanged();
    partial void Ontag_nameChanging(string value);
    partial void Ontag_nameChanged();
    #endregion
		
		public tag()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tag_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid tag_id
		{
			get
			{
				return this._tag_id;
			}
			set
			{
				if ((this._tag_id != value))
				{
					this.Ontag_idChanging(value);
					this.SendPropertyChanging();
					this._tag_id = value;
					this.SendPropertyChanged("tag_id");
					this.Ontag_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tag_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string tag_name
		{
			get
			{
				return this._tag_name;
			}
			set
			{
				if ((this._tag_name != value))
				{
					this.Ontag_nameChanging(value);
					this.SendPropertyChanging();
					this._tag_name = value;
					this.SendPropertyChanged("tag_name");
					this.Ontag_nameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.articles_tags")]
	public partial class articles_tag
	{
		
		private System.Guid _article_id;
		
		private System.Guid _tag_id;
		
		public articles_tag()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_article_id", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid article_id
		{
			get
			{
				return this._article_id;
			}
			set
			{
				if ((this._article_id != value))
				{
					this._article_id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tag_id", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid tag_id
		{
			get
			{
				return this._tag_id;
			}
			set
			{
				if ((this._tag_id != value))
				{
					this._tag_id = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.comments")]
	public partial class comment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _comment_id;
		
		private System.Guid _article_id;
		
		private System.Guid _customer_id;
		
		private string _comment_text;
		
		private System.DateTimeOffset _comment_create_date;
		
		private EntityRef<article> _article;
		
		private EntityRef<customer> _customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Oncomment_idChanging(System.Guid value);
    partial void Oncomment_idChanged();
    partial void Onarticle_idChanging(System.Guid value);
    partial void Onarticle_idChanged();
    partial void Oncustomer_idChanging(System.Guid value);
    partial void Oncustomer_idChanged();
    partial void Oncomment_textChanging(string value);
    partial void Oncomment_textChanged();
    partial void Oncomment_create_dateChanging(System.DateTimeOffset value);
    partial void Oncomment_create_dateChanged();
    #endregion
		
		public comment()
		{
			this._article = default(EntityRef<article>);
			this._customer = default(EntityRef<customer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_comment_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid comment_id
		{
			get
			{
				return this._comment_id;
			}
			set
			{
				if ((this._comment_id != value))
				{
					this.Oncomment_idChanging(value);
					this.SendPropertyChanging();
					this._comment_id = value;
					this.SendPropertyChanged("comment_id");
					this.Oncomment_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_article_id", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid article_id
		{
			get
			{
				return this._article_id;
			}
			set
			{
				if ((this._article_id != value))
				{
					if (this._article.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onarticle_idChanging(value);
					this.SendPropertyChanging();
					this._article_id = value;
					this.SendPropertyChanged("article_id");
					this.Onarticle_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_customer_id", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid customer_id
		{
			get
			{
				return this._customer_id;
			}
			set
			{
				if ((this._customer_id != value))
				{
					if (this._customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oncustomer_idChanging(value);
					this.SendPropertyChanging();
					this._customer_id = value;
					this.SendPropertyChanged("customer_id");
					this.Oncustomer_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_comment_text", DbType="NVarChar(400) NOT NULL", CanBeNull=false)]
		public string comment_text
		{
			get
			{
				return this._comment_text;
			}
			set
			{
				if ((this._comment_text != value))
				{
					this.Oncomment_textChanging(value);
					this.SendPropertyChanging();
					this._comment_text = value;
					this.SendPropertyChanged("comment_text");
					this.Oncomment_textChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_comment_create_date", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset comment_create_date
		{
			get
			{
				return this._comment_create_date;
			}
			set
			{
				if ((this._comment_create_date != value))
				{
					this.Oncomment_create_dateChanging(value);
					this.SendPropertyChanging();
					this._comment_create_date = value;
					this.SendPropertyChanged("comment_create_date");
					this.Oncomment_create_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="article_comment", Storage="_article", ThisKey="article_id", OtherKey="article_id", IsForeignKey=true)]
		public article article
		{
			get
			{
				return this._article.Entity;
			}
			set
			{
				article previousValue = this._article.Entity;
				if (((previousValue != value) 
							|| (this._article.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._article.Entity = null;
						previousValue.comments.Remove(this);
					}
					this._article.Entity = value;
					if ((value != null))
					{
						value.comments.Add(this);
						this._article_id = value.article_id;
					}
					else
					{
						this._article_id = default(System.Guid);
					}
					this.SendPropertyChanged("article");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="customer_comment", Storage="_customer", ThisKey="customer_id", OtherKey="customer_id", IsForeignKey=true)]
		public customer customer
		{
			get
			{
				return this._customer.Entity;
			}
			set
			{
				customer previousValue = this._customer.Entity;
				if (((previousValue != value) 
							|| (this._customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._customer.Entity = null;
						previousValue.comments.Remove(this);
					}
					this._customer.Entity = value;
					if ((value != null))
					{
						value.comments.Add(this);
						this._customer_id = value.customer_id;
					}
					else
					{
						this._customer_id = default(System.Guid);
					}
					this.SendPropertyChanged("customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.customers")]
	public partial class customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _customer_id;
		
		private string _customer_login;
		
		private string _customer_password;
		
		private EntitySet<article> _articles;
		
		private EntitySet<comment> _comments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Oncustomer_idChanging(System.Guid value);
    partial void Oncustomer_idChanged();
    partial void Oncustomer_loginChanging(string value);
    partial void Oncustomer_loginChanged();
    partial void Oncustomer_passwordChanging(string value);
    partial void Oncustomer_passwordChanged();
    #endregion
		
		public customer()
		{
			this._articles = new EntitySet<article>(new Action<article>(this.attach_articles), new Action<article>(this.detach_articles));
			this._comments = new EntitySet<comment>(new Action<comment>(this.attach_comments), new Action<comment>(this.detach_comments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_customer_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid customer_id
		{
			get
			{
				return this._customer_id;
			}
			set
			{
				if ((this._customer_id != value))
				{
					this.Oncustomer_idChanging(value);
					this.SendPropertyChanging();
					this._customer_id = value;
					this.SendPropertyChanged("customer_id");
					this.Oncustomer_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_customer_login", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string customer_login
		{
			get
			{
				return this._customer_login;
			}
			set
			{
				if ((this._customer_login != value))
				{
					this.Oncustomer_loginChanging(value);
					this.SendPropertyChanging();
					this._customer_login = value;
					this.SendPropertyChanged("customer_login");
					this.Oncustomer_loginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_customer_password", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string customer_password
		{
			get
			{
				return this._customer_password;
			}
			set
			{
				if ((this._customer_password != value))
				{
					this.Oncustomer_passwordChanging(value);
					this.SendPropertyChanging();
					this._customer_password = value;
					this.SendPropertyChanged("customer_password");
					this.Oncustomer_passwordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="customer_article", Storage="_articles", ThisKey="customer_id", OtherKey="customer_id")]
		public EntitySet<article> articles
		{
			get
			{
				return this._articles;
			}
			set
			{
				this._articles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="customer_comment", Storage="_comments", ThisKey="customer_id", OtherKey="customer_id")]
		public EntitySet<comment> comments
		{
			get
			{
				return this._comments;
			}
			set
			{
				this._comments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_articles(article entity)
		{
			this.SendPropertyChanging();
			entity.customer = this;
		}
		
		private void detach_articles(article entity)
		{
			this.SendPropertyChanging();
			entity.customer = null;
		}
		
		private void attach_comments(comment entity)
		{
			this.SendPropertyChanging();
			entity.customer = this;
		}
		
		private void detach_comments(comment entity)
		{
			this.SendPropertyChanging();
			entity.customer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.customers_roles")]
	public partial class customers_role
	{
		
		private System.Guid _customer_id;
		
		private System.Guid _role_id;
		
		public customers_role()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_customer_id", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid customer_id
		{
			get
			{
				return this._customer_id;
			}
			set
			{
				if ((this._customer_id != value))
				{
					this._customer_id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_role_id", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid role_id
		{
			get
			{
				return this._role_id;
			}
			set
			{
				if ((this._role_id != value))
				{
					this._role_id = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.roles")]
	public partial class role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _role_id;
		
		private string _role_name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onrole_idChanging(System.Guid value);
    partial void Onrole_idChanged();
    partial void Onrole_nameChanging(string value);
    partial void Onrole_nameChanged();
    #endregion
		
		public role()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_role_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid role_id
		{
			get
			{
				return this._role_id;
			}
			set
			{
				if ((this._role_id != value))
				{
					this.Onrole_idChanging(value);
					this.SendPropertyChanging();
					this._role_id = value;
					this.SendPropertyChanged("role_id");
					this.Onrole_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_role_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string role_name
		{
			get
			{
				return this._role_name;
			}
			set
			{
				if ((this._role_name != value))
				{
					this.Onrole_nameChanging(value);
					this.SendPropertyChanging();
					this._role_name = value;
					this.SendPropertyChanged("role_name");
					this.Onrole_nameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.rubrics")]
	public partial class rubric : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _rubric_id;
		
		private string _rubric_name;
		
		private EntitySet<article> _articles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onrubric_idChanging(System.Guid value);
    partial void Onrubric_idChanged();
    partial void Onrubric_nameChanging(string value);
    partial void Onrubric_nameChanged();
    #endregion
		
		public rubric()
		{
			this._articles = new EntitySet<article>(new Action<article>(this.attach_articles), new Action<article>(this.detach_articles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rubric_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid rubric_id
		{
			get
			{
				return this._rubric_id;
			}
			set
			{
				if ((this._rubric_id != value))
				{
					this.Onrubric_idChanging(value);
					this.SendPropertyChanging();
					this._rubric_id = value;
					this.SendPropertyChanged("rubric_id");
					this.Onrubric_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rubric_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string rubric_name
		{
			get
			{
				return this._rubric_name;
			}
			set
			{
				if ((this._rubric_name != value))
				{
					this.Onrubric_nameChanging(value);
					this.SendPropertyChanging();
					this._rubric_name = value;
					this.SendPropertyChanged("rubric_name");
					this.Onrubric_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="rubric_article", Storage="_articles", ThisKey="rubric_id", OtherKey="rubric_id")]
		public EntitySet<article> articles
		{
			get
			{
				return this._articles;
			}
			set
			{
				this._articles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_articles(article entity)
		{
			this.SendPropertyChanging();
			entity.rubric = this;
		}
		
		private void detach_articles(article entity)
		{
			this.SendPropertyChanging();
			entity.rubric = null;
		}
	}
}
#pragma warning restore 1591
